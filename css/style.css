/* Con grid podemos crear un layout de columnas y otras funcionalidades más */
/* Más info en el siguiente enlace => https://www.w3schools.com/css/css_grid.asp*/
.grid-container {
  display: grid;
  grid-template-columns:1fr 2fr;
}

/* Con flex podemos determinar cómo se acomodan los elementos internos a un contenedor */
/* Más info en el siguiente enlace => https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox */
.flex-container {
  display: flex;
  /* Establecer la propiedad en "wrap" permite que los elementos pasen para abajo si desbordan el tamaño del contenedor */
  flex-wrap: wrap;
  gap: 10px;
}


.carousel-inner p {
  text-align: center;
  font-weight: 500;
}

h3{
  text-align: center;
}

/* CSS para generar cada cuadrado */
.square {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgb(247, 247, 247);
  height: 120px;
  width:380px;
}


/* Con media queries podemos cambiar totalmente el diseño de nuestro sitio en función del tamaño de la pantalla */
/* Más info de media queries en el siguiente enlace => https://www.w3schools.com/css/css3_mediaqueries.asp*/
@media only screen and (max-width: 600px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}

@media only screen and (min-width: 600px) {
  .accordion{
    position: relative;
    left: 38%;  
    top: 10px;
    width: 18rem;
  } 
  .accordion{
    position: relative;
    left: 340px;
  }
}

@media only screen and (max-width: 320px) {
  .square{
    position: relative;
    left: 10px;
    width: 300px;
    height: 140px;
  }
}






